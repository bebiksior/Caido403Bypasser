id: misc-end-path
description: Add various chars at the end of the path.
enabled: true
modificationScript: >
  const suffixes=[
      // URL encoded trim inconsistencies
      "%09","%0A","%0B","%0C","%0D","%1C","%1D","%1E","%1F","%20","%C2%85","%C2%A0",
      // Misc special suffixes and common payloads
      "","%","%00","%23","%26","%2F","%3B","%3F","%5C","%61","&","+","debug","false","0","1","null","true","~","/","\\","\/","\/\/",".","..","..;","..\;","-","?param","?debug=1","?debug=true","?WSDL","?","??","???",";jsessionid=style.css",";style.css"
  ];


  const path = helper.getPath(input);

  const modifiedRequests = [];


  for (const suf of suffixes) {
    let newPath = path + suf;
    modifiedRequests.push(helper.setPath(input, () => newPath));

    newPath = path + suf + "/";
    modifiedRequests.push(helper.setPath(input, () => newPath));

    // Add suffix after a semicolon (used as query separator for some backends)
    newPath = path + ";" + suf;
    modifiedRequests.push(helper.setPath(input, () => newPath));

    // Add suffix after a comma (less common, taken from https://github.com/laluka/bypass-url-parser/blob/a75a72de352b27f0f4647b0037afbf4c08e8f50d/tests-history/bup-payloads-2024-10-23.lst#L79)
    newPath = path + "," + suf;
    modifiedRequests.push(helper.setPath(input, () => newPath));
  }


  return modifiedRequests;
